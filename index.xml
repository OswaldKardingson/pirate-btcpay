<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BTCPay Server on Pirate BTCPay Server</title><link>https://hhanh01.github.io/pirate-btcpay/</link><description>Recent content in BTCPay Server on Pirate BTCPay Server</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 26 Apr 2022 13:40:30 +0800</lastBuildDate><atom:link href="https://hhanh01.github.io/pirate-btcpay/index.xml" rel="self" type="application/rss+xml"/><item><title>Accounts</title><link>https://hhanh01.github.io/pirate-btcpay/api/accounts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh01.github.io/pirate-btcpay/api/accounts/</guid><description>Create a new account Create a new account and return its index and first address
it(&amp;#34;should allow creating new accounts&amp;#34;, async function () { const rep = await chakram.post(&amp;#39;http://localhost:8000/create_account&amp;#39;, {}) expect(rep).to.have.status(200) expect(rep.body).to.deep.equal({ account_index: 0, address: &amp;#34;zs1xflcmxuagwwn969htsej4mn3nuk7e3eeu3en4n4hkxajnqgmx5jsw0sa4p0r2ymqewf2ufefkfm&amp;#34; }) }) Create a new sub address Create a new diversified address for the given account
it(&amp;#34;should allow creating new address&amp;#34;, async function () { const rep = await chakram.post(&amp;#39;http://localhost:8000/create_address&amp;#39;, { account_index: 0 }) expect(rep).</description></item><item><title>Requirements</title><link>https://hhanh01.github.io/pirate-btcpay/installation/requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh01.github.io/pirate-btcpay/installation/requirements/</guid><description>Pirated &amp;amp; Lightwalletd You need a connection to a lightwalletd built for Pirate Chain.
The URL will typically have the port 9067 and look like https://lwd.pirate-chain.com:9067
We will call this the LWD_URL in the rest of the documentation.
./pirated ./lightwalletd --pirate-conf-path ~/.komodo/PIRATE/PIRATE.conf --no-tls-very-insecure --data-dir . --log-file /dev/stdout Rust You need to install Rust.</description></item><item><title>Build</title><link>https://hhanh01.github.io/pirate-btcpay/installation/build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh01.github.io/pirate-btcpay/installation/build/</guid><description>cargo b --release The binary is target/release/walletd</description></item><item><title>Server Status</title><link>https://hhanh01.github.io/pirate-btcpay/api/status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh01.github.io/pirate-btcpay/api/status/</guid><description>Both of these functions return the current height
it(&amp;#34;should give you the latest block height&amp;#34;, async function () { const rep = await chakram.post(&amp;#39;http://localhost:8000/get_height&amp;#39;, {}) expect(rep).to.have.status(200) expect(rep.body &amp;gt; 1000000) }) it(&amp;#34;should give you server status&amp;#34;, async function () { const rep = await chakram.post(&amp;#39;http://localhost:8000/sync_info&amp;#39;, {}) expect(rep).to.have.status(200) expect(rep.body.height &amp;gt; 1000000) })</description></item><item><title>Scan</title><link>https://hhanh01.github.io/pirate-btcpay/api/scan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh01.github.io/pirate-btcpay/api/scan/</guid><description>Scan the blockchain Scan the blockchain from the given starting_height or from the end of the previous scan.
it(&amp;#34;Scan blockchain&amp;#34;, async function () { this.timeout(120000); const rep = await chakram.post(&amp;#39;http://localhost:8000/request_scan&amp;#39;, {}) expect(rep).to.have.status(200) })</description></item><item><title>Usage</title><link>https://hhanh01.github.io/pirate-btcpay/installation/usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh01.github.io/pirate-btcpay/installation/usage/</guid><description>walletd is meant to be used with BTCPayserver. However, it is a standalone server that answers to REST RPC.
Configuration The configuratio is in Rocket.toml
[default] db_dir = &amp;#34;.&amp;#34; confirmations = 6 lwd_url = &amp;#34;http://localhost:9067&amp;#34; poll_interval = 10 notify_host = &amp;#34;localhost&amp;#34; fvk = &amp;#34;zxviews1qw73xgmkqqqqpqx3f2a93lddczpdk4kt58dh5nceks7l8jhw6zc30up6ph3etllafdp5f90st33sa6p27jmevdelhx6fpmhk698vyu7lfn0z6gpqr3nfedhec5k9x0w826fej59j84xqkndqe0ymety9sgc4ttfn82gheu988d9dr9n99zege9egzadkwf8eeur3xm5tajctx625ux67w0dlsl8hsa4l889js800jq6xvcnyp3v0tnh65cqwq6xfnk9cqczue24wyyskv63ke&amp;#34; starting_height = 1915516 [debug] address = &amp;#34;127.0.0.1&amp;#34; [release] address = &amp;#34;0.0.0.0&amp;#34; The default section applies to both profile. The debug section is for debug builds and the release profile is for the release build.</description></item><item><title>Payment</title><link>https://hhanh01.github.io/pirate-btcpay/api/payment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh01.github.io/pirate-btcpay/api/payment/</guid><description>Fee Estimate For shielded payments, the fee is 0.01 m
it(&amp;#34;Get fee estimate&amp;#34;, async function () { const rep = await chakram.post(&amp;#39;http://localhost:8000/get_fee_estimate&amp;#39;, {}) expect(rep).to.have.status(200) expect(rep.body).to.deep.equal({ &amp;#34;fee&amp;#34;: 1000 }) }) Get transaction by ID Given a tx ID and account index, return the transaction details
it(&amp;#34;Get transfer by id&amp;#34;, async function () { const rep = await chakram.post(&amp;#39;http://localhost:8000/get_transfer_by_txid&amp;#39;, { txid: &amp;#34;80ce417f3984ba936f344c4b2c9737740604767f5ac34a2c130925b015637835&amp;#34;, account_index: 0 }) expect(rep).to.have.status(200) delete(rep.body.transfer.confirmations) expect(rep.body).to.deep.equal({ &amp;#34;transfer&amp;#34;: { &amp;#34;address&amp;#34;: &amp;#34;zs1xflcmxuagwwn969htsej4mn3nuk7e3eeu3en4n4hkxajnqgmx5jsw0sa4p0r2ymqewf2ufefkfm&amp;#34;, &amp;#34;amount&amp;#34;: 99500000, &amp;#34;height&amp;#34;: 1915516, &amp;#34;fee&amp;#34;: 0, &amp;#34;note&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;payment_id&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;subaddr_index&amp;#34;: { &amp;#34;major&amp;#34;: 0, &amp;#34;minor&amp;#34;: 0 }, &amp;#34;suggested_confirmations_threshold&amp;#34;: 6, &amp;#34;timestamp&amp;#34;: 0, &amp;#34;txid&amp;#34;: &amp;#34;80ce417f3984ba936f344c4b2c9737740604767f5ac34a2c130925b015637835&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;in&amp;#34;, &amp;#34;unlock_time&amp;#34;: 0 }, &amp;#34;transfers&amp;#34;: [] }) }) Get all transactions For a given account and a set of sub addresses, return all the transactions</description></item></channel></rss>
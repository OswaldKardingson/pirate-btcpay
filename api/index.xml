<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API on Pirate BTCPay Server</title><link>https://hhanh01.github.io/pirate-btcpay/api/</link><description>Recent content in API on Pirate BTCPay Server</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://hhanh01.github.io/pirate-btcpay/api/index.xml" rel="self" type="application/rss+xml"/><item><title>Accounts</title><link>https://hhanh01.github.io/pirate-btcpay/api/accounts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh01.github.io/pirate-btcpay/api/accounts/</guid><description>Create a new account Create a new account and return its index and first address
it(&amp;#34;should allow creating new accounts&amp;#34;, async function () { const rep = await chakram.post(&amp;#39;http://localhost:8000/create_account&amp;#39;, {}) expect(rep).to.have.status(200) expect(rep.body).to.deep.equal({ account_index: 0, address: &amp;#34;zs1xflcmxuagwwn969htsej4mn3nuk7e3eeu3en4n4hkxajnqgmx5jsw0sa4p0r2ymqewf2ufefkfm&amp;#34; }) }) Create a new sub address Create a new diversified address for the given account
it(&amp;#34;should allow creating new address&amp;#34;, async function () { const rep = await chakram.post(&amp;#39;http://localhost:8000/create_address&amp;#39;, { account_index: 0 }) expect(rep).</description></item><item><title>Server Status</title><link>https://hhanh01.github.io/pirate-btcpay/api/status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh01.github.io/pirate-btcpay/api/status/</guid><description>Both of these functions return the current height
it(&amp;#34;should give you the latest block height&amp;#34;, async function () { const rep = await chakram.post(&amp;#39;http://localhost:8000/get_height&amp;#39;, {}) expect(rep).to.have.status(200) expect(rep.body &amp;gt; 1000000) }) it(&amp;#34;should give you server status&amp;#34;, async function () { const rep = await chakram.post(&amp;#39;http://localhost:8000/sync_info&amp;#39;, {}) expect(rep).to.have.status(200) expect(rep.body.height &amp;gt; 1000000) })</description></item><item><title>Scan</title><link>https://hhanh01.github.io/pirate-btcpay/api/scan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh01.github.io/pirate-btcpay/api/scan/</guid><description>Scan the blockchain Scan the blockchain from the given starting_height or from the end of the previous scan.
it(&amp;#34;Scan blockchain&amp;#34;, async function () { this.timeout(120000); const rep = await chakram.post(&amp;#39;http://localhost:8000/request_scan&amp;#39;, {}) expect(rep).to.have.status(200) })</description></item><item><title>Payment</title><link>https://hhanh01.github.io/pirate-btcpay/api/payment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh01.github.io/pirate-btcpay/api/payment/</guid><description>Fee Estimate For shielded payments, the fee is 0.01 m
it(&amp;#34;Get fee estimate&amp;#34;, async function () { const rep = await chakram.post(&amp;#39;http://localhost:8000/get_fee_estimate&amp;#39;, {}) expect(rep).to.have.status(200) expect(rep.body).to.deep.equal({ &amp;#34;fee&amp;#34;: 1000 }) }) Get transaction by ID Given a tx ID and account index, return the transaction details
it(&amp;#34;Get transfer by id&amp;#34;, async function () { const rep = await chakram.post(&amp;#39;http://localhost:8000/get_transfer_by_txid&amp;#39;, { txid: &amp;#34;80ce417f3984ba936f344c4b2c9737740604767f5ac34a2c130925b015637835&amp;#34;, account_index: 0 }) expect(rep).to.have.status(200) delete(rep.body.transfer.confirmations) expect(rep.body).to.deep.equal({ &amp;#34;transfer&amp;#34;: { &amp;#34;address&amp;#34;: &amp;#34;zs1xflcmxuagwwn969htsej4mn3nuk7e3eeu3en4n4hkxajnqgmx5jsw0sa4p0r2ymqewf2ufefkfm&amp;#34;, &amp;#34;amount&amp;#34;: 99500000, &amp;#34;height&amp;#34;: 1915516, &amp;#34;fee&amp;#34;: 0, &amp;#34;note&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;payment_id&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;subaddr_index&amp;#34;: { &amp;#34;major&amp;#34;: 0, &amp;#34;minor&amp;#34;: 0 }, &amp;#34;suggested_confirmations_threshold&amp;#34;: 6, &amp;#34;timestamp&amp;#34;: 0, &amp;#34;txid&amp;#34;: &amp;#34;80ce417f3984ba936f344c4b2c9737740604767f5ac34a2c130925b015637835&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;in&amp;#34;, &amp;#34;unlock_time&amp;#34;: 0 }, &amp;#34;transfers&amp;#34;: [] }) }) Get all transactions For a given account and a set of sub addresses, return all the transactions</description></item></channel></rss>
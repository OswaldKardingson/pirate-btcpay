[{"uri":"https://hhanh01.github.io/pirate-btcpay/installation/","title":"Installation","tags":[],"description":"","content":"Installation "},{"uri":"https://hhanh01.github.io/pirate-btcpay/api/accounts/","title":"Accounts","tags":[],"description":"","content":"Create a new account Create a new account and return its index and first address\nit(\u0026#34;should allow creating new accounts\u0026#34;, async function () { const rep = await chakram.post(\u0026#39;http://localhost:8000/create_account\u0026#39;, {}) expect(rep).to.have.status(200) expect(rep.body).to.deep.equal({ account_index: 0, address: \u0026#34;zs1xflcmxuagwwn969htsej4mn3nuk7e3eeu3en4n4hkxajnqgmx5jsw0sa4p0r2ymqewf2ufefkfm\u0026#34; }) }) Create a new sub address Create a new diversified address for the given account\nit(\u0026#34;should allow creating new address\u0026#34;, async function () { const rep = await chakram.post(\u0026#39;http://localhost:8000/create_address\u0026#39;, { account_index: 0 }) expect(rep).to.have.status(200) expect(rep.body).to.deep.equal({ address: \u0026#34;zs1afgu28nemdza4exykhvp24d6jxja85jg44gu8k7xwusr5p09yery922nfn228hvagc33x5wkd4h\u0026#34;, address_index: 1 }) }) List all accounts and balances walletd does not consider outgoing transactions. It is designed to handle incoming PAYMENTS. Therefore if you spend from these accounts, the balance will be over-estimated.\n it(\u0026#34;list accounts\u0026#34;, async function () { const rep = await chakram.post(\u0026#39;http://localhost:8000/get_accounts\u0026#39;, {}) expect(rep).to.have.status(200) expect(rep.body).to.deep.equal({ \u0026#34;subaddress_accounts\u0026#34;: [ { \u0026#34;account_index\u0026#34;: 0, \u0026#34;balance\u0026#34;: 99500000, \u0026#34;base_address\u0026#34;: \u0026#34;zs1xflcmxuagwwn969htsej4mn3nuk7e3eeu3en4n4hkxajnqgmx5jsw0sa4p0r2ymqewf2ufefkfm\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;unlocked_balance\u0026#34;: 99500000 } ], \u0026#34;total_balance\u0026#34;: 99500000, \u0026#34;total_unlocked_balance\u0026#34;: 99500000 }) }) "},{"uri":"https://hhanh01.github.io/pirate-btcpay/installation/requirements/","title":"Requirements","tags":[],"description":"","content":"Pirated \u0026amp; Lightwalletd You need a connection to a lightwalletd built for Pirate Chain.\nThe URL will typically have the port 9067 and look like https://lwd.pirate-chain.com:9067\nWe will call this the LWD_URL in the rest of the documentation.\n./pirated ./lightwalletd --pirate-conf-path ~/.komodo/PIRATE/PIRATE.conf --no-tls-very-insecure --data-dir . --log-file /dev/stdout Rust You need to install Rust.\n"},{"uri":"https://hhanh01.github.io/pirate-btcpay/api/","title":"API","tags":[],"description":"","content":"API "},{"uri":"https://hhanh01.github.io/pirate-btcpay/installation/build/","title":"Build","tags":[],"description":"","content":"cargo b --release The binary is target/release/walletd\n"},{"uri":"https://hhanh01.github.io/pirate-btcpay/api/status/","title":"Server Status","tags":[],"description":"","content":"Both of these functions return the current height\nit(\u0026#34;should give you the latest block height\u0026#34;, async function () { const rep = await chakram.post(\u0026#39;http://localhost:8000/get_height\u0026#39;, {}) expect(rep).to.have.status(200) expect(rep.body \u0026gt; 1000000) }) it(\u0026#34;should give you server status\u0026#34;, async function () { const rep = await chakram.post(\u0026#39;http://localhost:8000/sync_info\u0026#39;, {}) expect(rep).to.have.status(200) expect(rep.body.height \u0026gt; 1000000) }) "},{"uri":"https://hhanh01.github.io/pirate-btcpay/api/scan/","title":"Scan","tags":[],"description":"","content":"Scan the blockchain Scan the blockchain from the given starting_height or from the end of the previous scan.\nit(\u0026#34;Scan blockchain\u0026#34;, async function () { this.timeout(120000); const rep = await chakram.post(\u0026#39;http://localhost:8000/request_scan\u0026#39;, {}) expect(rep).to.have.status(200) }) "},{"uri":"https://hhanh01.github.io/pirate-btcpay/installation/usage/","title":"Usage","tags":[],"description":"","content":"walletd is meant to be used with BTCPayserver. However, it is a standalone server that answers to REST RPC.\nConfiguration The configuratio is in Rocket.toml\n[default] db_dir = \u0026#34;.\u0026#34; confirmations = 6 lwd_url = \u0026#34;http://localhost:9067\u0026#34; poll_interval = 10 notify_host = \u0026#34;localhost\u0026#34; fvk = \u0026#34;zxviews1qw73xgmkqqqqpqx3f2a93lddczpdk4kt58dh5nceks7l8jhw6zc30up6ph3etllafdp5f90st33sa6p27jmevdelhx6fpmhk698vyu7lfn0z6gpqr3nfedhec5k9x0w826fej59j84xqkndqe0ymety9sgc4ttfn82gheu988d9dr9n99zege9egzadkwf8eeur3xm5tajctx625ux67w0dlsl8hsa4l889js800jq6xvcnyp3v0tnh65cqwq6xfnk9cqczue24wyyskv63ke\u0026#34; starting_height = 1915516 [debug] address = \u0026#34;127.0.0.1\u0026#34; [release] address = \u0026#34;0.0.0.0\u0026#34; The default section applies to both profile. The debug section is for debug builds and the release profile is for the release build.\n db_dir: Location of the database directory where the wallet.db file is created. confirmations: The number of block confirmations needed for a payment to be unlocked lwd_url: URL of the lightwalletd server poll_interval: Frequency at which the wallet will check new blocks notify_host: Hostname of the BTCPayserver. walletd calls back BTCPayserver when it detects an incoming payment. fvk: The wallet Extended Full Viewing Key starting_height: The birth height of the wallet, i.e. no transactions occurred before that height. address: Listening address  Wallet Configuration At a minimum, you will need to change fvk and starting_height.\n "},{"uri":"https://hhanh01.github.io/pirate-btcpay/api/payment/","title":"Payment","tags":[],"description":"","content":"Fee Estimate For shielded payments, the fee is 0.01 m\nit(\u0026#34;Get fee estimate\u0026#34;, async function () { const rep = await chakram.post(\u0026#39;http://localhost:8000/get_fee_estimate\u0026#39;, {}) expect(rep).to.have.status(200) expect(rep.body).to.deep.equal({ \u0026#34;fee\u0026#34;: 1000 }) }) Get transaction by ID Given a tx ID and account index, return the transaction details\nit(\u0026#34;Get transfer by id\u0026#34;, async function () { const rep = await chakram.post(\u0026#39;http://localhost:8000/get_transfer_by_txid\u0026#39;, { txid: \u0026#34;80ce417f3984ba936f344c4b2c9737740604767f5ac34a2c130925b015637835\u0026#34;, account_index: 0 }) expect(rep).to.have.status(200) delete(rep.body.transfer.confirmations) expect(rep.body).to.deep.equal({ \u0026#34;transfer\u0026#34;: { \u0026#34;address\u0026#34;: \u0026#34;zs1xflcmxuagwwn969htsej4mn3nuk7e3eeu3en4n4hkxajnqgmx5jsw0sa4p0r2ymqewf2ufefkfm\u0026#34;, \u0026#34;amount\u0026#34;: 99500000, \u0026#34;height\u0026#34;: 1915516, \u0026#34;fee\u0026#34;: 0, \u0026#34;note\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;payment_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;subaddr_index\u0026#34;: { \u0026#34;major\u0026#34;: 0, \u0026#34;minor\u0026#34;: 0 }, \u0026#34;suggested_confirmations_threshold\u0026#34;: 6, \u0026#34;timestamp\u0026#34;: 0, \u0026#34;txid\u0026#34;: \u0026#34;80ce417f3984ba936f344c4b2c9737740604767f5ac34a2c130925b015637835\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;in\u0026#34;, \u0026#34;unlock_time\u0026#34;: 0 }, \u0026#34;transfers\u0026#34;: [] }) }) Get all transactions For a given account and a set of sub addresses, return all the transactions\nit(\u0026#34;list transactions\u0026#34;, async function () { const rep = await chakram.post(\u0026#39;http://localhost:8000/get_transfers\u0026#39;, { in: true, account_index: 0, subaddr_indices: [0] }) expect(rep).to.have.status(200) delete(rep.body.in[0].confirmations) expect(rep.body).to.deep.equal({ \u0026#34;in\u0026#34;: [ { \u0026#34;address\u0026#34;: \u0026#34;zs1xflcmxuagwwn969htsej4mn3nuk7e3eeu3en4n4hkxajnqgmx5jsw0sa4p0r2ymqewf2ufefkfm\u0026#34;, \u0026#34;amount\u0026#34;: 99500000, \u0026#34;height\u0026#34;: 1915516, \u0026#34;fee\u0026#34;: 0, \u0026#34;note\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;payment_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;subaddr_index\u0026#34;: { \u0026#34;major\u0026#34;: 0, \u0026#34;minor\u0026#34;: 0 }, \u0026#34;suggested_confirmations_threshold\u0026#34;: 6, \u0026#34;timestamp\u0026#34;: 0, \u0026#34;txid\u0026#34;: \u0026#34;80ce417f3984ba936f344c4b2c9737740604767f5ac34a2c130925b015637835\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;in\u0026#34;, \u0026#34;unlock_time\u0026#34;: 0 } ] }) }) "},{"uri":"https://hhanh01.github.io/pirate-btcpay/","title":"BTCPay Server","tags":[],"description":"","content":"BTCPay Server \u0026amp; Pirate Chain Quick Start Requirements: Docker\nTested on Linux\n Download the docker-compose.yml for this project Edit BTCPAYSERVER_starting_height and BTCPAYSERVER_fvk. They should set to your receiving wallet birth height and full viewing key. Launch the server  $ wget https://raw.githubusercontent.com/hhanh01/pirate-btcpay/main/docker/docker-compose.yml $ vim docker-compose.yml $ docker-compose -f docker-compose.yml up default Configuration   Navigate to BTCPayserver and create the administrator account   Create your store   Make sure you set the default currency to ARRR (you must type it in)\n  Do not set a wallet or a lightning node,   Instead, go to Settings then Pirate,   Click on \u0026ldquo;Modify\u0026rdquo;   Enable the Wallet. Save and return to the previous page   Now create a test app   Set the app name and leave it as Point of Sale   Save the new app and then click on View\n  Choose one of the item for sale and Pay for it   You should see a payment code   Use your wallet to pay for it\n  Once it is confirmed, the invoice should be paid\n  Your server is now setup.\nNext steps Refer to the BTCPayserver documentation for the next steps.\n You may want to configure a reverse proxy to isolate your server from the internet and add SSL If you use Wordpress or Shopify, there are integration plugins for these platforms  "},{"uri":"https://hhanh01.github.io/pirate-btcpay/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://hhanh01.github.io/pirate-btcpay/tags/","title":"Tags","tags":[],"description":"","content":""}]